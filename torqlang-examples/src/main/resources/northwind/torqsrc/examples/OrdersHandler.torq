
/*
type Order <: Rec = {
    "id"::Int64,
    "employee_id"::Int64,
    "customer_id"::Int64,
    "order_date"::Date,
    "shipped_date"::Date,
    "shipper_id"::Int64,
    "ship_name"::Str,
    "ship_address"::Str,
    "ship_city"::Str,
    "ship_state_province"::Str,
    "ship_zip_postal_code"::Int64,
    "ship_country_region"::Str,
    "shipping_fee"::Dec128,
    "taxes"::Dec128,
    "payment_type"::Str,
    "paid_date"::Date,
    "notes"::Str,
    "tax_rate"::Flt64,
    "tax_status_id"::Int32,
    "status_id"::Int32
}
*/

actor OrdersHandler() in

    // TODO: change `shipping_fee` in JSON files to be a decimal string
    // TODO: change `taxes` in JSON files to be a decimal string

    import system.{ArrayList, Int64, LocalDate, Rec, ValueIter}
    import examples.NorthwindDb

    handle ask 'GET'#{'headers': headers, 'path': path, 'query': query, 'context': context} in
        var northwind_db = spawn(new NorthwindDb())
        case path
            of ['orders'] then
                var orders_ext = new ArrayList()
                var orders = northwind_db.ask(
                    'findAll'#{
                        'entity': 'orders',
                        'criteria': query
                    }
                )
                for order in new ValueIter(orders) do
                    var employee = northwind_db.ask(
                        'findByKey'#{
                            'entity': 'employees',
                            'key': {'id': order.employee_id}
                        }
                    )
                    var customer = northwind_db.ask(
                        'findByKey'#{
                            'entity': 'customers',
                            'key': {'id': order.customer_id}
                        }
                    )
                    orders_ext.add(Rec.assign({'employee': employee, 'customer': customer}, order))
                end
                orders_ext.to_tuple()
            of ['orders', order_id] then
                var order = northwind_db.ask(
                    'findByKey'#{
                        'entity': 'orders',
                        'key': {'id': order_id}
                    }
                )
                if order == null then
                    throw 'error'#{'message': 'Order not found', 'details': {'order_id': order_id}}
                end
                var details = northwind_db.ask(
                    'findAll'#{
                        'entity': 'order_details',
                        'criteria': {'order_id': order_id}
                    }
                )
                Rec.assign({'details': if details == null then [] else details end}, order)
            of ['orders', order_id, 'details'] then
                var details_ext = new ArrayList()
                var details = northwind_db.ask(
                    'findAll'#{
                        'entity': 'order_details',
                        'criteria': {'order_id': order_id}
                    }
                )
                for d in new ValueIter(details) do
                    var product = northwind_db.ask(
                        'findByKey'#{
                            'entity': 'products',
                            'key': {'id': d.product_id}
                        }
                    )
                    if product == null then
                        throw 'error'#{'message': 'Product not found', 'details': {'order_id': order_id}}
                    end
                    var product_suppliers = northwind_db.ask(
                        'findAll'#{
                            'entity': 'product_suppliers',
                            'criteria': {'product_id': d.product_id}
                        }
                    )
                    var product_suppliers = new ArrayList()
                    for ps in new ValueIter(product_suppliers) do
                        product_suppliers.add(
                            northwind_db.ask(
                                'findByKey'#{
                                    'entity': 'suppliers',
                                    'key': {'id': ps.supplier_id}
                                }
                            )
                        )
                    end
                    var product_ext = Rec.assign({'suppliers': product_suppliers.to_tuple()}, product)
                    details_ext.add(Rec.assign({'product': product_ext}, d))
                end
                details_ext.to_tuple()
            else
                throw 'error'#{'message': 'Invalid request', 'details': {'path': path}}
        end
    end

    handle ask 'PATCH'#{'headers': headers, 'path': path, 'query': query, 'body': body, 'context': context} in
        throw 'error'#{'message': 'PATCH needs impl', 'details': {'path': path}}
    end

end
