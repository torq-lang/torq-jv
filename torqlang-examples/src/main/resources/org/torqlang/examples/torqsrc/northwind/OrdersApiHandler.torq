package northwind

import system.util.Message

import northwind.Customer
import northwind.Employee
import northwind.Product
import northwind.Supplier

meta#{'export'}
type Order = {
    'id': Int64,
    'employee_id': Int64,
    'customer_id': Int64,
    'order_date': Date,
    'shipped_date': Date,
    'shipper_id': Int64,
    'ship_name': Str,
    'ship_address': Str,
    'ship_city': Str,
    'ship_state_province': Str,
    'ship_zip_postal_code': Int64,
    'ship_country_region': Str,
    'shipping_fee': Dec128,
    'taxes': Dec128,
    'payment_type': Str,
    'paid_date': Date,
    'notes': Str,
    'tax_rate': Flt64,
    'tax_status_id': Int32,
    'status_id': Int32
}

meta#{'export'}
type OrderWithCustomerAndEmployee = Order & {'customer': Customer, 'employee': Employee}

meta#{'export'}
type OrderDetails = {
    'order_id': Int64,
    'product_id': Int64,
    'line_seq': Int64,
    'quantity': Dec128,
    'unit_price': Dec128,
    'discount': Flt64,
    'status_id': Int64,
    'date_allocated': Date,
    'purchase_order_id': Int64,
    'inventory_id': Int64,
}

meta#{'export'}
type OrderWithDetails = Order & {'details': Array[OrderDetails]}

meta#{'export'}
type ProductWithSuppliers = Product & {'suppliers': Array[Supplier]}

meta#{'export'}
type OrderDetailsWithProductWithSuppliers = OrderDetails & {'product': ProductWithSuppliers}

meta#{'export'}
protocol OrdersApi = {
    ask 'GET'#{'headers': headers, 'path': ['orders'], 'query': query, 'context': context, ...} -> Array[OrderWithCustomerAndEmployee] | Message,
    ask 'GET'#{'headers': headers, 'path': ['orders', order_id::Int64], 'query': query, 'context': context, ...} -> OrderWithDetails | Message,
    ask 'PATCH'#{'headers': headers, 'path': ['orders', order_id::Int64], 'query': query, 'body': body::Order, 'context': context, ...} -> true | Message,
}

meta#{'export': 'api-handler'}
actor OrdersApiHandler() implements OrdersApi in
    import system.{ArrayList, Int64, LocalDate, Rec, ValueIter}
    import examples.NorthwindDb

    meta#{'export', 'response-codes': {'Array[OrderWithCustomerAndEmployee]': 200, 'Message': 400}}
    handle ask 'GET'#{'headers': headers, 'path': ['orders'], 'query': query, 'context': context, ...} ->
        Array[OrderWithCustomerAndEmployee] | Message
    in
         var northwind_db = spawn(new NorthwindDb())
         var orders_ext = new ArrayList[OrderWithCustomerAndEmployee]()
         var orders = northwind_db.ask(
             'findAll'#{
                 'entity': 'orders',
                 'criteria': query
             }
         )
         for order in new ValueIter(orders) do
             var employee = northwind_db.ask(
                 'findByKey'#{
                     'entity': 'employees',
                     'key': {'id': order.employee_id}
                 }
             )
             var customer = northwind_db.ask(
                 'findByKey'#{
                     'entity': 'customers',
                     'key': {'id': order.customer_id}
                 }
             )
             orders_ext.add(Rec.assign({'employee': employee, 'customer': customer}, order))
         end
         orders_ext.to_array()
    end

    meta#{'export'}
    handle ask 'GET'#{'headers': headers, 'path': ['orders', order_id::Int64], 'query': query, 'context': context, ...} ->
        OrderWithDetails | Message
    in
        var northwind_db = spawn(new NorthwindDb())
        var order = northwind_db.ask(
            'findByKey'#{
                'entity': 'orders',
                'key': {'id': order_id}
            }
        )
        if order == null then
            throw 'error'#{'message': 'Order not found', 'details': {'order_id': order_id}}
        end
        var details = northwind_db.ask(
            'findAll'#{
                'entity': 'order_details',
                'criteria': {'order_id': order_id}
            }
        )
        Rec.assign({'details': if details == null then [] else details end}, order)
    end

    meta#{'export'}
    handle ask 'GET'#{'headers': headers, 'path': ['orders', order_id::Int64, 'details'], 'query': query, 'context': context, ...} ->
        Array[OrderDetailsWithProductWithSuppliers] | Message
    in
        var northwind_db = spawn(new NorthwindDb())
        var details_ext = new ArrayList()
        var details = northwind_db.ask(
            'findAll'#{
                'entity': 'order_details',
                'criteria': {'order_id': order_id}
            }
        )
        for d in new ValueIter(details) do
            var product = northwind_db.ask(
                'findByKey'#{
                    'entity': 'products',
                    'key': {'id': d.product_id}
                }
            )
            if product == null then
                throw 'error'#{'message': 'Product not found', 'details': {'order_id': order_id}}
            end
            var product_suppliers = northwind_db.ask(
                'findAll'#{
                    'entity': 'product_suppliers',
                    'criteria': {'product_id': d.product_id}
                }
            )
            var product_suppliers_ext = new ArrayList()
            for ps in new ValueIter(product_suppliers) do
                product_suppliers_ext.add(
                    northwind_db.ask(
                        'findByKey'#{
                            'entity': 'suppliers',
                            'key': {'id': ps.supplier_id}
                        }
                    )
                )
            end
            var product_ext = Rec.assign({'suppliers': product_suppliers_ext.to_array()}, product)
            details_ext.add(Rec.assign({'product': product_ext}, d))
        end
        details_ext.to_array()
    end

    handle ask 'PATCH'#{'headers': headers, 'path': ['orders', order_id::Int64], 'query': query, 'body': body::Order, 'context': context, ...} ->
        true | Message
    in
        skip
    end
end