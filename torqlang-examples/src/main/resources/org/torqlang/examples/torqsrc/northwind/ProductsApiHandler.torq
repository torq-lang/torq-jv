package northwind

import system.util.Message

meta#{'export'}
type Product = {
    'id': Int64,
    'product_code': Str,
    'product_name': Str,
    'description': Str,
    'standard_cost': Dec128,
    'list_price': Dec128,
    'reorder_level': Int64,
    'target_level': Int64,
    'quantity_per_unit': Str,
    'discontinued': Bool,
    'minimum_reorder_quantity': Int64,
    'category': Str,
}

meta#{'export'}
protocol ProductsApi = {
    ask 'GET'#{'headers': headers, 'path': ['products'], 'query': query, 'context': context} -> Array[Product] | Message,
    ask 'GET'#{'headers': headers, 'path': ['products', product_id], 'query': query, 'context': context} -> Product | Message,
    ask 'PATCH'#{'headers': headers, 'path': path, 'query': query, 'body': body, 'context': context} -> true | Message,
}

meta#{'export': 'api-handler'}
actor ProductsApiHandler() implements ProductsApi in

    import system.lang.{Int64, Rec, ValueIter}
    import system.util.{ArrayList, LocalDate}
    import examples.NorthwindDb

    meta#{'export'}
    handle ask 'GET'#{'headers': headers, 'path': ['products'], 'query': query, 'context': context} ->
        Array[Product] | Message
    in
        var northwind_db = spawn(new NorthwindDb())
        northwind_db.ask(
            'findAll'#{
                'entity': 'products',
                'criteria': query
            }
        )
    end

    meta#{'export'}
    handle ask 'GET'#{'headers': headers, 'path': ['products', product_id::Int64], 'query': query, 'context': context} ->
        Product | Message
    in
        var northwind_db = spawn(new NorthwindDb())
        northwind_db.ask(
            'findByKey'#{
                'entity': 'products',
                'key': {'id': product_id}
            }
        )
    end

    handle ask 'PATCH'#{'headers': headers, 'path': path, 'query': query, 'body': body, 'context': context} ->
        true | Message
    in
        throw 'error'#{'message': 'PATCH needs impl', 'details': {'path': path}}
    end

end
